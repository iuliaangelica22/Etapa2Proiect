Starting audit...
[ERROR] /home/iulia/Desktop/PROIECT POO/teme/teme/proiect-etapa2/./src/electrical/Month.java:25: Line is longer than 100 characters (found 109). [LineLength]
[ERROR] /home/iulia/Desktop/PROIECT POO/teme/teme/proiect-etapa2/./src/electrical/Month.java:25:71: ',' is not followed by whitespace. [WhitespaceAfter]
[ERROR] /home/iulia/Desktop/PROIECT POO/teme/teme/proiect-etapa2/./src/electrical/Producer.java:16:5: Class 'Producer' looks like designed for extension (can be subclassed), but the method 'update' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Producer' final or making the method 'update' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/iulia/Desktop/PROIECT POO/teme/teme/proiect-etapa2/./src/electrical/Producer.java:17:32: 'energyPerDistributor' hides a field. [HiddenField]
[ERROR] /home/iulia/Desktop/PROIECT POO/teme/teme/proiect-etapa2/./src/electrical/Producer.java:18:9: 'for' is not followed by whitespace. [WhitespaceAfter]
[ERROR] /home/iulia/Desktop/PROIECT POO/teme/teme/proiect-etapa2/./src/electrical/Producer.java:18:59: '{' is not preceded with whitespace. [WhitespaceAround]
[ERROR] /home/iulia/Desktop/PROIECT POO/teme/teme/proiect-etapa2/./src/electrical/Producer.java:25:5: Class 'Producer' looks like designed for extension (can be subclassed), but the method 'getCurrentDistributors' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Producer' final or making the method 'getCurrentDistributors' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/iulia/Desktop/PROIECT POO/teme/teme/proiect-etapa2/./src/electrical/Producer.java:29:5: Class 'Producer' looks like designed for extension (can be subclassed), but the method 'setCurrentDistributors' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Producer' final or making the method 'setCurrentDistributors' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/iulia/Desktop/PROIECT POO/teme/teme/proiect-etapa2/./src/electrical/Producer.java:33:5: Class 'Producer' looks like designed for extension (can be subclassed), but the method 'getId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Producer' final or making the method 'getId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/iulia/Desktop/PROIECT POO/teme/teme/proiect-etapa2/./src/electrical/Producer.java:37:5: Class 'Producer' looks like designed for extension (can be subclassed), but the method 'setId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Producer' final or making the method 'setId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/iulia/Desktop/PROIECT POO/teme/teme/proiect-etapa2/./src/electrical/Producer.java:41:5: Class 'Producer' looks like designed for extension (can be subclassed), but the method 'getEnergyType' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Producer' final or making the method 'getEnergyType' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/iulia/Desktop/PROIECT POO/teme/teme/proiect-etapa2/./src/electrical/Producer.java:45:5: Class 'Producer' looks like designed for extension (can be subclassed), but the method 'setEnergyType' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Producer' final or making the method 'setEnergyType' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/iulia/Desktop/PROIECT POO/teme/teme/proiect-etapa2/./src/electrical/Producer.java:49:5: Class 'Producer' looks like designed for extension (can be subclassed), but the method 'getMaxDistributors' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Producer' final or making the method 'getMaxDistributors' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/iulia/Desktop/PROIECT POO/teme/teme/proiect-etapa2/./src/electrical/Producer.java:53:5: Class 'Producer' looks like designed for extension (can be subclassed), but the method 'setMaxDistributors' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Producer' final or making the method 'setMaxDistributors' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/iulia/Desktop/PROIECT POO/teme/teme/proiect-etapa2/./src/electrical/Producer.java:57:5: Class 'Producer' looks like designed for extension (can be subclassed), but the method 'getPriceKW' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Producer' final or making the method 'getPriceKW' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/iulia/Desktop/PROIECT POO/teme/teme/proiect-etapa2/./src/electrical/Producer.java:61:5: Class 'Producer' looks like designed for extension (can be subclassed), but the method 'setPriceKW' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Producer' final or making the method 'setPriceKW' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/iulia/Desktop/PROIECT POO/teme/teme/proiect-etapa2/./src/electrical/Producer.java:65:5: Class 'Producer' looks like designed for extension (can be subclassed), but the method 'getEnergyPerDistributor' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Producer' final or making the method 'getEnergyPerDistributor' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/iulia/Desktop/PROIECT POO/teme/teme/proiect-etapa2/./src/electrical/Producer.java:69:5: Class 'Producer' looks like designed for extension (can be subclassed), but the method 'setEnergyPerDistributor' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Producer' final or making the method 'setEnergyPerDistributor' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/iulia/Desktop/PROIECT POO/teme/teme/proiect-etapa2/./src/electrical/Producer.java:73:5: Class 'Producer' looks like designed for extension (can be subclassed), but the method 'getNumberOfCurrentDistributors' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Producer' final or making the method 'getNumberOfCurrentDistributors' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/iulia/Desktop/PROIECT POO/teme/teme/proiect-etapa2/./src/electrical/Producer.java:77:5: Class 'Producer' looks like designed for extension (can be subclassed), but the method 'setNumberOfCurrentDistributors' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Producer' final or making the method 'setNumberOfCurrentDistributors' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/iulia/Desktop/PROIECT POO/teme/teme/proiect-etapa2/./src/electrical/Producer.java:81:5: Class 'Producer' looks like designed for extension (can be subclassed), but the method 'equals' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Producer' final or making the method 'equals' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/iulia/Desktop/PROIECT POO/teme/teme/proiect-etapa2/./src/electrical/Producer.java:81:5: Definition of 'equals()' without corresponding definition of 'hashCode()'. [EqualsHashCode]
[ERROR] /home/iulia/Desktop/PROIECT POO/teme/teme/proiect-etapa2/./src/strategies/PriceStrategy.java:16:5: Class 'PriceStrategy' looks like designed for extension (can be subclassed), but the method 'specificStrategy' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'PriceStrategy' final or making the method 'specificStrategy' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/iulia/Desktop/PROIECT POO/teme/teme/proiect-etapa2/./src/strategies/QuantityStrategy.java:15:5: Class 'QuantityStrategy' looks like designed for extension (can be subclassed), but the method 'specificStrategy' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'QuantityStrategy' final or making the method 'specificStrategy' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/iulia/Desktop/PROIECT POO/teme/teme/proiect-etapa2/./src/strategies/Strategy.java:3:8: Unused import - electrical.Producer. [UnusedImports]
[ERROR] /home/iulia/Desktop/PROIECT POO/teme/teme/proiect-etapa2/./src/strategies/Strategy.java:5:8: Unused import - java.util.ArrayList. [UnusedImports]
[ERROR] /home/iulia/Desktop/PROIECT POO/teme/teme/proiect-etapa2/./src/strategies/Strategy.java:8:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] /home/iulia/Desktop/PROIECT POO/teme/teme/proiect-etapa2/./src/strategies/GreenStrategy.java:15:5: Class 'GreenStrategy' looks like designed for extension (can be subclassed), but the method 'specificStrategy' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GreenStrategy' final or making the method 'specificStrategy' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/iulia/Desktop/PROIECT POO/teme/teme/proiect-etapa2/./src/strategies/StrategyFactory.java:8:1: Utility classes should not have a public or default constructor. [HideUtilityClassConstructor]
[ERROR] /home/iulia/Desktop/PROIECT POO/teme/teme/proiect-etapa2/./src/strategies/StrategyFactory.java:9: Line is longer than 100 characters (found 112). [LineLength]
[ERROR] /home/iulia/Desktop/PROIECT POO/teme/teme/proiect-etapa2/./src/strategies/StrategyFactory.java:9:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] /home/iulia/Desktop/PROIECT POO/teme/teme/proiect-etapa2/./src/strategies/StrategyFactory.java:9:112: '{' is not preceded with whitespace. [WhitespaceAround]
[ERROR] /home/iulia/Desktop/PROIECT POO/teme/teme/proiect-etapa2/./src/strategies/EnergyChoiceStrategyType.java:10:25: Variable 'label' must be private and have accessor methods. [VisibilityModifier]
[ERROR] /home/iulia/Desktop/PROIECT POO/teme/teme/proiect-etapa2/./src/data/read/InitialData.java:41:31: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/iulia/Desktop/PROIECT POO/teme/teme/proiect-etapa2/./src/data/read/InitialData.java:42:42: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/iulia/Desktop/PROIECT POO/teme/teme/proiect-etapa2/./src/data/read/InitialData.java:43:50: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/iulia/Desktop/PROIECT POO/teme/teme/proiect-etapa2/./src/data/read/InitialData.java:44:44: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/iulia/Desktop/PROIECT POO/teme/teme/proiect-etapa2/./src/Main.java:24:25: ',' is not followed by whitespace. [WhitespaceAfter]
[ERROR] /home/iulia/Desktop/PROIECT POO/teme/teme/proiect-etapa2/./src/update/MonthlyUpdates.java:40:34: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/iulia/Desktop/PROIECT POO/teme/teme/proiect-etapa2/./src/update/MonthlyUpdates.java:41:48: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/iulia/Desktop/PROIECT POO/teme/teme/proiect-etapa2/./src/update/MonthlyUpdates.java:42:62: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/iulia/Desktop/PROIECT POO/teme/teme/proiect-etapa2/./src/update/MonthlyUpdates.java:43:56: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/iulia/Desktop/PROIECT POO/teme/teme/proiect-etapa2/./src/update/ProducerChanges.java:7:5: Class 'ProducerChanges' looks like designed for extension (can be subclassed), but the method 'getId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ProducerChanges' final or making the method 'getId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/iulia/Desktop/PROIECT POO/teme/teme/proiect-etapa2/./src/update/ProducerChanges.java:11:5: Class 'ProducerChanges' looks like designed for extension (can be subclassed), but the method 'setId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ProducerChanges' final or making the method 'setId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/iulia/Desktop/PROIECT POO/teme/teme/proiect-etapa2/./src/update/ProducerChanges.java:15:5: Class 'ProducerChanges' looks like designed for extension (can be subclassed), but the method 'getEnergyPerDistributor' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ProducerChanges' final or making the method 'getEnergyPerDistributor' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/iulia/Desktop/PROIECT POO/teme/teme/proiect-etapa2/./src/update/ProducerChanges.java:19:5: Class 'ProducerChanges' looks like designed for extension (can be subclassed), but the method 'setEnergyPerDistributor' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ProducerChanges' final or making the method 'setEnergyPerDistributor' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/iulia/Desktop/PROIECT POO/teme/teme/proiect-etapa2/./src/observer/Subject.java:9:5: Class 'Subject' looks like designed for extension (can be subclassed), but the method 'append' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Subject' final or making the method 'append' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/iulia/Desktop/PROIECT POO/teme/teme/proiect-etapa2/./src/observer/Subject.java:9:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] /home/iulia/Desktop/PROIECT POO/teme/teme/proiect-etapa2/./src/observer/Subject.java:12:5: Class 'Subject' looks like designed for extension (can be subclassed), but the method 'setStatus' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Subject' final or making the method 'setStatus' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/iulia/Desktop/PROIECT POO/teme/teme/proiect-etapa2/./src/observer/Subject.java:12:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] /home/iulia/Desktop/PROIECT POO/teme/teme/proiect-etapa2/./src/observer/Subject.java:12:35: 'newEnergy' hides a field. [HiddenField]
[ERROR] /home/iulia/Desktop/PROIECT POO/teme/teme/proiect-etapa2/./src/observer/Subject.java:17:5: Class 'Subject' looks like designed for extension (can be subclassed), but the method 'notifyAllObservers' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Subject' final or making the method 'notifyAllObservers' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/iulia/Desktop/PROIECT POO/teme/teme/proiect-etapa2/./src/observer/Subject.java:17:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] /home/iulia/Desktop/PROIECT POO/teme/teme/proiect-etapa2/./src/com/company/Main.java:3:1: Utility classes should not have a public or default constructor. [HideUtilityClassConstructor]
[ERROR] /home/iulia/Desktop/PROIECT POO/teme/teme/proiect-etapa2/./src/com/company/Main.java:5:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] /home/iulia/Desktop/PROIECT POO/teme/teme/proiect-etapa2/./src/com/company/Main.java:6:1: File contains tab characters (this is the first instance). [FileTabCharacter]
[ERROR] /home/iulia/Desktop/PROIECT POO/teme/teme/proiect-etapa2/./src/simulations/Round.java:95:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] /home/iulia/Desktop/PROIECT POO/teme/teme/proiect-etapa2/./src/simulations/Round.java:123:98: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/iulia/Desktop/PROIECT POO/teme/teme/proiect-etapa2/./src/simulations/Round.java:124:74: '10' is a magic number. [MagicNumber]
Audit done.
Checkstyle ends with 59 errors.
